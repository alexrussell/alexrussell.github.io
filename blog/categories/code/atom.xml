<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Alex's Blog]]></title>
  <link href="http://alexrussell.me.uk/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://alexrussell.me.uk/"/>
  <updated>2013-11-01T16:07:46+00:00</updated>
  <id>http://alexrussell.me.uk/</id>
  <author>
    <name><![CDATA[Alex Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel Digest (October 2013)]]></title>
    <link href="http://alexrussell.me.uk/blog/2013/11/laravel-digest-october-2013/"/>
    <updated>2013-11-01T13:20:00+00:00</updated>
    <id>http://alexrussell.me.uk/blog/2013/11/laravel-digest-october-2013</id>
    <content type="html"><![CDATA[<p>Welcome to the second instalment of Laravel Digest, the series where I give a regular rundown of important changes, fixes and additions to Laravel&rsquo;s master branch. Below are the changes up to the end of October 2013</p>

<ul>
<li>Blade braces can now be escaped using <code>@</code> which is useful for people using clientside templating languages that also use the braces (<a href="https://github.com/laravel/framework/commit/cb93bf3df8d25c04939462f81b75ddb9e4e6faa0"><code>cb93bf3</code></a>):</li>
</ul>


<p>The following code will output <code>hello</code>
<code>html
{{ 'hello' }}
</code></p>

<p>The following code will output <code>hello</code>
<code>html
@{{ $variable }}
</code></p>

<p>Use case, using handlebars.js:
<code>html
&lt;div class="name"&gt;@{{ user.name }}&lt;/div&gt;
</code></p>

<ul>
<li><p>Queued cookies &ndash; because cookies can only be attached to a request, using <code>Cookie::set()</code> before the request was instantiated previous lost the cookie (or simply wasn&rsquo;t allowed). Now <code>Cookie::queue()</code> can be used to queue cookies for eventual sending with the request.</p></li>
<li><p><code>Route::controller</code> is back and appears slightly cleverer than before in that it first seeks out all callable methods on the given controller and adds each route individually, then sets up a &lsquo;default&rsquo; route for anything it can&rsquo;t detect (<a href="https://github.com/laravel/framework/commit/98c14a9f90ada608418490e4cfacd51f4ebda384"><code>98c14a9</code></a>)</p>

<ul>
<li><code>Route::controllers</code> can also be used to hook multiple controllers up in one go by passing an associative array of uri to controller FQCN</li>
</ul>
</li>
<li><p><code>App::env()</code> can now be used to check the environment against a list provided (array or multiple arguments) (<a href="https://github.com/laravel/framework/commit/66e5a0b32f61b1ec0e14aa4bc4219d15c2a247c7"><code>66e5a0b</code></a>)</p></li>
<li><p>Remote tail command (<code>artisan tail</code>) allows tailing of a remote log file (assuming the remote connection is set up correctly in the config and the remote project uses a single log file) (<a href="https://github.com/laravel/framework/commit/25b1cac27080641b289c2ad791b734efff92bcef"><code>25b1cac</code></a>)</p>

<ul>
<li>As a consequence of this work, the logging system was simplified down to a single log file by default (no daily rotation and no SAPI name, this looks like it may generate rather large log files to me, I&rsquo;d have preferred to keep daily rotation) (<a href="https://github.com/laravel/laravel/commit/088f4b69b6b9846dd54b55688f11e44b9bc73483"><code>laravel/laravel@088f4b6</code></a>)</li>
<li>Also as a consequence, the live debugging through sockets was removed. Now the <code>tail</code> command will tail a remote log file if there&rsquo;s a remote connection specified, or tail the local log file if there&rsquo;s no remote connection specified (<a href="https://github.com/laravel/framework/commit/f62d1a727155073357babee95a8f679003a8b93c"><code>f62d1a7</code></a>/<a href="https://github.com/laravel/framework/commit/763a02652ba23a9b61f59b47c05ab146bbe76136"><code>763a0265</code></a>)</li>
</ul>
</li>
<li><p>New <code>Router::input()</code> method that allows you to get the value of a named route parameter (<a href="https://github.com/laravel/framework/commit/28e36bbc0296e3b4cdf5ae18c5a972923c05b4de"><code>28e36bb</code></a>)</p></li>
<li><p>Controller filters can now be added as controller functions using the <code>@</code> syntax as a shorthand (see <a href="https://github.com/laravel/framework/issues/2432">issue 2432</a>) (<a href="https://github.com/laravel/framework/commit/d0e0c632e2b3ff15746e48ec7bd57c5cc51d0ae0"><code>d0e0c63</code></a>):</p></li>
</ul>


<p>``` php
&lt;?php</p>

<p>class UserController extends Contoller
{</p>

<pre><code>public function __construct()
{
    // before:
    $this-&gt;beforeFilter(function ($route) {
        return $this-&gt;hasPermission($route);
    }, ['only' =&gt; 'edit']);

    // after, shorthand
    $this-&gt;beforeFilter('@hasPermission', ['only' =&gt; 'edit']);
}

public function hasPermission($route)
{
    $id = $route-&gt;getParameter('id');

    if (! Auth::user()-&gt;ownsPost($id)) {
        return Response::make('You are not authorised to edit this post', 401);
    }
}
</code></pre>

<p>}
```</p>

<ul>
<li><p>Can now pass DateTime and Carbon instances to Cache method that accept a duration (in this case, the time difference between now and the time passed is calculated in minutes) (<a href="https://github.com/laravel/framework/commit/977f803030b84ce28f034bcf925f93bfb029a0d4"><code>977f803</code></a>)</p></li>
<li><p>Now uses <a href="http://stackphp.com/">Stack</a> for middleware (multiple commits). Repercussions:</p>

<ul>
<li><code>close</code> application hook is now deprecated in favour of using a stack middleware (<a href="https://github.com/laravel/framework/commit/18e1aecb69897b9533968d4c9f291f3a522ef98f"><code>18e1aec</code></a>)</li>
<li>Presumably more&hellip;</li>
</ul>
</li>
<li><p>Should now use Input::cookie for cookies, not Cookie::get (<a href="https://github.com/laravel/framework/commit/e0fe79e398003e54d54f2626e1283e97209b7f50"><code>e0fe79e</code></a> removed <code>Cookie::get()</code> and <a href="https://github.com/laravel/framework/commit/58ec2fe05f092bdd09f2e05d8a86633b97417cef"><code>58ec2fe</code></a> for temporary deprecation code in the facade)</p></li>
<li><p>If using MySQL, <code>UPDATE</code> queries can now have <code>orderBy</code> and <code>limit</code> specified (<a href="https://github.com/laravel/framework/commit/d9d61e13fc2f01efc00c9b87ff6f1e91bab1e9b8"><code>d9d61e1</code></a>)</p></li>
<li><p>As with overriding packages' config and views, translations can now be overridden using a similar convention (<a href="https://github.com/laravel/framework/commit/5483042e8762d4f8ffc356579ddaae4f7dc3cbc9"><code>5483042</code></a>)</p>

<ul>
<li><p>It should be noted that the convention is not the same: it is not <code>app/lang/packages/vendor/package/</code> but uses the namespace (i.e. package name) <em>only</em>, like when referencing views/config (i.e. <code>View::make('namespace:path.view')</code> and <code>Config:get('namespace:config.key')</code>)</p></li>
<li><p>Files for a package <code>vendor/package</code> in locale <code>en</code> should go in <code>app/lang/packages/en/package/</code> &mdash; see how it&rsquo;s just <code>package</code> not <code>vendor/package</code> like it would be for config and views</p></li>
<li><p>So to reiterate, for a package called <code>vendor/package</code>:</p>

<ul>
<li>Views: <code>View::make('package::some/view')</code> ⟶ <code>app/views/packages/vendor/package/some/view{.blade}.php</code></li>
<li>Config: <code>Config::get('package::some.key')</code> ⟶ <code>app/config/packages/vendor/package/some.php</code>, then key <code>key</code></li>
<li>Translations: <code>Lang::get('package::some.key')</code> ⟶ <code>app/lang/packages/en/package/some.php</code>, then key <code>key</code></li>
</ul>
</li>
</ul>
</li>
<li><p>You can now use <code>Auth::viaRemember()</code> to determine whether the logged-in user was authorised through the &lsquo;remember me&rsquo; cookie or not (<a href="https://github.com/laravel/framework/commit/2184ad4c8fe5f05b89ae1d5c6f87012cca150101"><code>2184ad4</code></a>)</p></li>
<li><p>New <code>bindShared</code> method on the IoC container which should now be used in place of the old share syntax (<a href="https://github.com/laravel/framework/commit/07233b32eb190dffde427b3aee1e5e4f855abd00"><code>07233b3</code></a>):</p></li>
</ul>


<p>``` php
// this
$this->app[&lsquo;my.key&rsquo;] = $this->app->share(function ($app) {</p>

<pre><code>return new MyClass();
</code></pre>

<p>});</p>

<p>// becomes this
$this->app->bindShared(&lsquo;my.key&rsquo;, function ($app) {</p>

<pre><code>return new MyClass();
</code></pre>

<p>});
```</p>

<ul>
<li><p><code>ServiceProvider</code> no longer uses very weird logic to guess a package&rsquo;s namespace. This probably won&rsquo;t affect many people but I&rsquo;m pointing it out as it has affected me and it&rsquo;s good to know for future reference (<a href="https://github.com/laravel/framework/commit/6089525e1293407085c07588f2eb8b2cd8644b01"><code>6089525</code></a>)</p></li>
<li><p>You can now pass a view to <code>Paginator::links([$view])</code> in order to override the default view for that call (<a href="https://github.com/laravel/framework/commit/9d1150c8851d22cb1a14faa35304b3dc7f17c94b"><code>9d1150c</code></a>)</p></li>
<li><p>New <code>hasManyThrough</code> relation type (<a href="https://github.com/laravel/framework/commit/0925d868b900372a39c0f9985308004d24bad46d"><code>0925d86</code></a>)</p>

<ul>
<li>There&rsquo;s no real documentation on this yet and the tests are a little cryptic, so I&rsquo;ll talk more about this in the next update.</li>
</ul>
</li>
<li><p><code>Validator::make</code> can now take a fourth parameter that specified the custom parameters for the validator. Presumably to be used by custom validators. (<a href="https://github.com/laravel/framework/commit/93977e49559ec82e8a82f19bbdfcf4f27cfb4ac0"><code>93977e4</code></a>)</p></li>
<li><p>IoC container old <code>resolving</code> method is now renamed to <code>resolvingAny</code> and now there&rsquo;s a new <code>resolving</code> method in its place that accepts an abstract object type to only be fired when that abstract type is being resolved (<a href="https://github.com/laravel/framework/commit/aa6df0aa52f588c588c2f0c0646039ad35efe19b"><code>aa6df0a</code></a>)</p></li>
<li><p>Any alaises bound to a given IoC key will now be removed when rebinding the key (<a href="https://github.com/laravel/framework/commit/8f240f83785e1aebd0d5abf848d8425786a9ba86"><code>8f240f8</code></a>)</p></li>
<li><p>Queue workers will no no longer run if the application is in maintenance mode (<a href="https://github.com/laravel/framework/commit/a8cdb683a097e04281ada784d9073c8a83f72bf1"><code>a8cdb68</code></a>)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Project Dependencies with composer require]]></title>
    <link href="http://alexrussell.me.uk/blog/2013/10/adding-project-dependencies-with-composer-require/"/>
    <updated>2013-10-25T20:22:00+01:00</updated>
    <id>http://alexrussell.me.uk/blog/2013/10/adding-project-dependencies-with-composer-require</id>
    <content type="html"><![CDATA[<p>Composer&rsquo;s been around for some time now, and gained a lot of popularity since its use in Laravel 4. I noticed back in the first half of 2013 that a lot of blogs and tutorials were teaching installation of packages (or, more correctly, addition of project dependencies) by editing your <code>composer.json</code> file&rsquo;s <code>require</code> array and then doing a <code>composer update</code> on the command line. I thought back then that maybe because composer was new to these people (in general these were related to Laravel 4 which was in development at the time) they hadn&rsquo;t yet discovered the easier, and technically less error-prone, way to do this that very few people seemed to be using and advising: <code>composer require</code></p>

<p>Well it seems that most people still haven&rsquo;t discovered the command, so I figured I would write about it. Instead of (possibly erroneously) manually editing your <code>composer.json</code> file to add a new package to your project&rsquo;s dependencies and then calling <code>composer update</code>, you can use <code>composer require</code> to do the job for you. You&rsquo;re having to use the command line anyway, so why not skip the manual editing of <code>composer.json</code> part?</p>

<p>The syntax is really simple:</p>

<pre><code>composer require vendor/package version
</code></pre>

<p>It&rsquo;s as easy as that. And you can even require a dev dependency with the <code>--dev</code> option:</p>

<pre><code>composer require mockery/mockery 0.8.0 --dev
</code></pre>

<p>In fact, the command can be used to add multiple packages to your project&rsquo;s dependencies by simply separating them with a space. In this case, it&rsquo;s probably best to use the alternative version constraint syntax which is <code>vendor/package:version</code> or <code>vendor/package=version</code>:</p>

<pre><code>composer require --dev mockery/mockery:0.8.0 phpunit/phpunit:~3.7.4
</code></pre>

<p>Also notice how the <code>--dev</code> can go either before or after the packages &mdash; use what works best for you.</p>

<p>Another good thing about it is that if anything goes wrong during installation of the packages or their dependencies then Composer will leave your composer.json file unchanged.</p>

<hr />

<p>There is one caveat to this: if you wish to use the asterisk to denote any patch or minor version is okay, then it&rsquo;s best to put the argument in question in quotes so that your shell doesn&rsquo;t try (and probably fail) to interpret it as a glob on the filesystem. In my case (using <a href="http://fishshell.com/">fish</a>) the following happens:</p>

<pre><code>&gt; composer require mockery/mockery 0.8.* --dev
fish: No matches for wildcard '0.8.*'.
composer require mockery/mockery 0.8.* --dev
                                 ^
</code></pre>

<p>However, with the argument quoted it&rsquo;s all good:</p>

<pre><code>composer require "mockery/mockery 0.8.*" --dev
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Digest (September 2013)]]></title>
    <link href="http://alexrussell.me.uk/blog/2013/10/laravel-digest-september-2013/"/>
    <updated>2013-10-04T10:55:00+01:00</updated>
    <id>http://alexrussell.me.uk/blog/2013/10/laravel-digest-september-2013</id>
    <content type="html"><![CDATA[<p>Introducing Laravel digest, where I let you know what&rsquo;s changed in the most recent commits to Laravel. I like to think of it as me reading the commitlog so you don&rsquo;t have to. The general idea is that I&rsquo;ll list out any notable changes on the master branch (although really I&rsquo;m looking at both master and 4.0) since the previous update. I pretty much decide what&rsquo;s classed as notable, but usually it&rsquo;ll be stuff that actually affects the way developers work, so small bugfixes won&rsquo;t be in, but new features or uses of existing components are included.</p>

<p>As this is the first installment of Laravel digest there&rsquo;s no &ldquo;since last time&rdquo; so I&rsquo;m arbitrarily deciding its since about mid-September. A fortnight seems like a good period of time between updates (and maybe longer where Taylor has less time to spend on the framework).</p>

<p>So, without further ado:</p>

<p>Notable recent changes (since approx. 15 September 2013) on master specifically (but most apply to 4.0 too):</p>

<ul>
<li><p><code>artisan tinker</code> is now a full REPL using <a href="https://github.com/d11wtq/boris">Boris</a> (<a href="https://github.com/laravel/framework/commit/5e8d2c0e38b9630cf881336cbfde6c64657e4d30"><code>5e8d2c0</code></a>)</p>

<ul>
<li>It does, however, require <code>ext_readline</code> and <code>ext_posix</code> if you want to use it though (ouch!)</li>
</ul>
</li>
<li><p>Views can have data added eloquently (<a href="https://github.com/laravel/framework/commit/e7fd520a8b7d38b9aa68aee8fea880b725da46e9"><code>e7fd520</code></a>)</p></li>
</ul>


<p>``` php
&lt;?php</p>

<p>// this
return View::make(&lsquo;view.name&rsquo;)&ndash;>with([&lsquo;user&rsquo; => $user]);</p>

<p>// or this
return View::make(&lsquo;view.name&rsquo;, [&lsquo;user&rsquo; => $user]);</p>

<p>// becomes this
return View::make(&lsquo;view.name&rsquo;)&ndash;>withUser($user);
```</p>

<ul>
<li><p>View composers can have a priority attached so they run in a given order (<a href="https://github.com/laravel/framework/commit/fb4fe45a9c795e250d046e87f6c3c86a6d01f850"><code>fb4fe45</code></a>)</p></li>
<li><p>Developers can specify a protected instance <code>dates</code> array in their Eloquent models that returns an array of fields that should be treated like dates (<a href="https://github.com/laravel/framework/commit/f15b034dc744290a08e0abc776f06ed991426d4e"><code>f15b034</code></a>)</p></li>
<li><p>Query builder/Eloquent now has a chunk method that allows for working through large datasets without killing RAM usage (<a href="https://github.com/laravel/framework/commit/11d3e9850dc6139850d5e81c71067ae2d7a894d9"><code>11d3e98</code></a>):</p></li>
</ul>


<p>``` php
&lt;?php</p>

<p>User::whereActive(&lsquo;1&rsquo;)&ndash;>chunk(</p>

<pre><code>100, // per chunk
function($results) {
    // do something with set of 100 results at a time
}
</code></pre>

<p>);
```</p>

<ul>
<li><code>Route::group</code> config array now accepts a <code>namespace</code> string that will automatically prefix controller names with the namespace &ndash; they can even be nested (<a href="https://github.com/laravel/framework/commit/3d0400e55a81b79d3352670f2e24f7358eb95d10"><code>3d0400e</code></a>)</li>
</ul>


<p>``` php
&lt;?php</p>

<p>// something a bit like this
Route::group(</p>

<pre><code>['prefix' =&gt; 'admin'],
function() {
    Route::get('some/url', 'MyApp\\Admin\\UserController@index');
    Route::get('some/other/url', 'MyApp\\Admin\\UserController@edit');
}
</code></pre>

<p>);</p>

<p>// can become the slightly cleaner
Route::group(</p>

<pre><code>['prefix' =&gt; 'admin', 'namespace' =&gt; 'MyApp\\Admin'],
function() {
    Route::get('users', 'UserController@index');
    Route::get('user/edit', 'UserController@edit');
}
</code></pre>

<p>);
```</p>

<ul>
<li>Query builder/Eloquent can now find multiple rows with <code>find()</code> by passing an array (<a href="https://github.com/laravel/framework/commit/911e08b1501c45b7b58a62007708bc9494e385b5"><code>911e08b</code></a>)</li>
</ul>


<p>``` php
&lt;?php</p>

<p>// get users 1 and 5
$users = User::find([1, 5])&ndash;>get();
```</p>

<ul>
<li><p>Can get current environment using <code>artisan env</code> (useful for debugging weird database connection issues with artisan &ndash; not so useful for knowing what environment the web site is running as artisan and the running web instance will use different methods to determine the environment, so they could quite easily be different) (<a href="https://github.com/laravel/framework/commit/5c7ba12fda225a295ae96dbb7770f4859aa65330"><code>5c7ba12</code></a>)</p></li>
<li><p>Can now return an ArrayObject from a route action and it&rsquo;ll be serialised as JSON (previously it was just just bare arrays and JsonableInterface objects) (<a href="https://github.com/laravel/framework/commit/bd4b0c6eb5633c8ebf6daf7ed2329550fb2761d5"><code>bd4b0c6</code></a>)</p></li>
<li><p>Packages' views can now be published (like config and assets were) using <code>artisan view:publish</code> (<a href="https://github.com/laravel/framework/commit/44a27da7245b5da88fd97934d250b59813127053"><code>44a27da</code></a>)</p></li>
<li><p>Paginator can now be returned from a route action and it&rsquo;ll be serialised to JSON (good for paginated responses in APIs) (<a href="https://github.com/laravel/framework/commit/5875b60d823b331ee838ebbe74fbc64a53c520a4"><code>5875b60</code></a>)</p></li>
<li><p>Eloquent query builder now has <code>firstOrNew</code> and <code>firstOrCreate</code> methods (<a href="https://github.com/laravel/framework/commit/fce86bc9b53cb693284ea1dc557b3034375fd1ca"><code>fce86bc</code></a>):</p>

<ul>
<li><code>firstOrNew</code> tries to use the passed array of attributes to find the model, and if it can&rsquo;t find it it&rsquo;ll create a new (unsaved) instance of the model</li>
<li><code>firstOrCreate</code> tries to use the passed array of attributes to find the model, and if it can&rsquo;t find it it&rsquo;ll create a new instance of the model and save it immediately</li>
<li><strong>Implementation note:</strong> this also uses a convenient new method <code>firstByAttributes</code> which is unfortunately protected in <code>Illuminate\Database\Eloquent\Model</code>. The method is nothing special, just cycles through the array adding <code>where</code>s to a query builder</li>
</ul>
</li>
<li><p>new <code>Redirect::away</code> method allows passing of any URL &ndash; the passed URL is not validated, works just like <code>Redirect::to</code> otherwise (<a href="https://github.com/laravel/framework/commit/8c47d1173a8f666d8be278219f63d3c51459379e"><code>8c47d11</code></a>)</p></li>
<li><p>Remote feature now allows setting the port (<a href="https://github.com/laravel/framework/commit/3f7c47cb243be3ba201bf75c6c0c38e7b96b43b3"><code>3f7c47c</code></a>)</p></li>
<li><p>Like the Eloquent view data from <code>e7fd520</code>, redirects can do the same (<a href="https://github.com/laravel/framework/commit/97bbfe6f09e7b0a5143d65568e886f7a1ace2f9c"><code>97bbfe6</code></a>):</p></li>
</ul>


<p>``` php
&lt;?php</p>

<p>Redirect::route(&lsquo;login&rsquo;)&ndash;>withMessage(&lsquo;Please log in&rsquo;);
```</p>

<ul>
<li>Validator now has a <code>sometimes</code> method that allows to set conditional rules (<a href="https://github.com/laravel/framework/commit/ffa70d312c8e639ce36e2859d4977dba123a2af6"><code>ffa70d3</code></a>, <a href="http://laravel.com/docs/validation#conditionally-adding-rules">docs</a>):</li>
</ul>


<p>``` php
&lt;?php</p>

<p>// say we&rsquo;re validating some kind of user type &ndash; if &lsquo;business_type&rsquo; is set
// to &lsquo;business&rsquo; then &lsquo;business_name&rsquo; is requied</p>

<p>$v = Validator::make($data, [</p>

<pre><code>'email'        =&gt; 'required|email',
'name'         =&gt; 'required',
'license_type' =&gt; 'required',
</code></pre>

<p>]);</p>

<p>// this rule only applies when the closure returns true
$v->sometimes(&lsquo;business_name&rsquo;, &lsquo;required&rsquo;, function($input) {</p>

<pre><code>return $input-&gt;license_type == 'business';
</code></pre>

<p>});
```</p>

<p>The first parameter to <code>sometimes</code> can be an array that specifies multiple rules:</p>

<p>``` php
&lt;?php</p>

<p>// Example: in the checkout area of an ecommerce site, only require the delivery
// fields to be set if the &lsquo;deliver to my billing address&rsquo; field is not checked</p>

<p>$v->sometimes(</p>

<pre><code>['delivery_name', 'delivery_address', 'delivery_country' /* etc. */],
'required',
function($input) {
    return $input-&gt;deliver_to_billing_address != 'yes';
}
</code></pre>

<p>);
```</p>
]]></content>
  </entry>
  
</feed>
