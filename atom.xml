<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alex's Blog]]></title>
  <link href="http://alexrussell.me.uk/atom.xml" rel="self"/>
  <link href="http://alexrussell.me.uk/"/>
  <updated>2013-10-28T10:20:37+00:00</updated>
  <id>http://alexrussell.me.uk/</id>
  <author>
    <name><![CDATA[Alex Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Project Dependencies with composer require]]></title>
    <link href="http://alexrussell.me.uk/blog/2013/10/adding-project-dependencies-with-composer-require/"/>
    <updated>2013-10-25T20:22:00+01:00</updated>
    <id>http://alexrussell.me.uk/blog/2013/10/adding-project-dependencies-with-composer-require</id>
    <content type="html"><![CDATA[<p>Composer&rsquo;s been around for some time now, and gained a lot of popularity since its use in Laravel 4. I noticed back in the first half of 2013 that a lot of blogs and tutorials were teaching installation of packages (or, more correctly, addition of project dependencies) by editing your <code>composer.json</code> file&rsquo;s <code>require</code> array and then doing a <code>composer update</code> on the command line. I thought back then that maybe because composer was new to these people (in general these were related to Laravel 4 which was in development at the time) they hadn&rsquo;t yet discovered the easier, and technically less error-prone, way to do this that very few people seemed to be using and advising: <code>composer require</code></p>

<p>Well it seems that most people still haven&rsquo;t discovered the command, so I figured I should write about it. Instead of erroneously manually editing your <code>composer.json</code> file to add a new package to your project&rsquo;s dependencies and then calling <code>composer update</code>, you can use <code>composer require</code> to do the job for you. You&rsquo;re having to use the command line anyway, so why not skip the manual editing of <code>composer.json</code> part?</p>

<p>The syntax is really simple:</p>

<pre><code>composer require vendor/package version
</code></pre>

<p>It&rsquo;s as easy as that. And you can even require a dev dependency with the <code>--dev</code> option:</p>

<pre><code>composer require mockery/mockery 0.8.0 --dev
</code></pre>

<p>In fact, the command can be used to add multiple packages to your project&rsquo;s dependencies by simply separating them with a space. In this case, it&rsquo;s probably best to use the alternative version constraint syntax which is <code>vendor/package:version</code> or <code>vendor/package=version</code>:</p>

<pre><code>composer require --dev mockery/mockery:0.8.0 phpunit/phpunit:~3.7.4
</code></pre>

<p>Also notice how the <code>--dev</code> can go either before or after the packages &mdash; use what works best for you.</p>

<hr />

<p>There is one caveat to this: if you wish to use the asterisk to denote any patch or minor version is okay, then it&rsquo;s best to put the argument in question in quotes so that your shell doesn&rsquo;t try (and probably fail) to interpret it as a glob on the filesystem. In my case (using <a href="http://fishshell.com/">fish</a>) the following happens:</p>

<pre><code>&gt; composer require mockery/mockery 0.8.* --dev
fish: No matches for wildcard '0.8.*'.
composer require mockery/mockery 0.8.* --dev
                                 ^
</code></pre>

<p>However, with the argument quoted it&rsquo;s all good:</p>

<pre><code>composer require "mockery/mockery 0.8.*" --dev
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Digest (September 2013)]]></title>
    <link href="http://alexrussell.me.uk/blog/2013/10/laravel-digest-september-2013/"/>
    <updated>2013-10-04T10:55:00+01:00</updated>
    <id>http://alexrussell.me.uk/blog/2013/10/laravel-digest-september-2013</id>
    <content type="html"><![CDATA[<p>Introducing Laravel digest, where I let you know what&rsquo;s changed in the most recent commits to Laravel. I like to think of it as me reading the commitlog so you don&rsquo;t have to. The general idea is that I&rsquo;ll list out any notable changes on the master branch (although really I&rsquo;m looking at both master and 4.0) since the previous update. I pretty much decide what&rsquo;s classed as notable, but usually it&rsquo;ll be stuff that actually affects the way developers work, so small bugfixes won&rsquo;t be in, but new features or uses of existing components are included.</p>

<p>As this is the first installment of Laravel digest there&rsquo;s no &ldquo;since last time&rdquo; so I&rsquo;m arbitrarily deciding its since about mid-September. A fortnight seems like a good period of time between updates (and maybe longer where Taylor has less time to spend on the framework).</p>

<p>So, without further ado:</p>

<p>Notable recent changes (since approx. 15 September 2013) on master specifically (but most apply to 4.0 too):</p>

<ul>
<li><p><code>artisan tinker</code> is now a full REPL using <a href="https://github.com/d11wtq/boris">Boris</a> (<a href="https://github.com/laravel/framework/commit/5e8d2c0e38b9630cf881336cbfde6c64657e4d30"><code>5e8d2c0</code></a>)</p>

<ul>
<li>It does, however, require <code>ext_readline</code> and <code>ext_posix</code> if you want to use it though (ouch!)</li>
</ul>
</li>
<li><p>Views can have data added eloquently (<a href="https://github.com/laravel/framework/commit/e7fd520a8b7d38b9aa68aee8fea880b725da46e9"><code>e7fd520</code></a>)</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this</span>
</span><span class='line'><span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;view.name&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">with</span><span class="p">([</span><span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or this</span>
</span><span class='line'><span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;view.name&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// becomes this</span>
</span><span class='line'><span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;view.name&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">withUser</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>View composers can have a priority attached so they run in a given order (<a href="https://github.com/laravel/framework/commit/fb4fe45a9c795e250d046e87f6c3c86a6d01f850"><code>fb4fe45</code></a>)</p></li>
<li><p>Developers can specify a protected instance <code>dates</code> array in their Eloquent models that returns an array of fields that should be treated like dates (<a href="https://github.com/laravel/framework/commit/f15b034dc744290a08e0abc776f06ed991426d4e"><code>f15b034</code></a>)</p></li>
<li><p>Query builder/Eloquent now has a chunk method that allows for working through large datasets without killing RAM usage (<a href="https://github.com/laravel/framework/commit/11d3e9850dc6139850d5e81c71067ae2d7a894d9"><code>11d3e98</code></a>):</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nx">User</span><span class="o">::</span><span class="na">whereActive</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">chunk</span><span class="p">(</span>
</span><span class='line'>    <span class="mi">100</span><span class="p">,</span> <span class="c1">// per chunk</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do something with set of 100 results at a time</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Route::group</code> config array now accepts a <code>namespace</code> string that will automatically prefix controller names with the namespace &ndash; they can even be nested (<a href="https://github.com/laravel/framework/commit/3d0400e55a81b79d3352670f2e24f7358eb95d10"><code>3d0400e</code></a>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// something a bit like this</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;prefix&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;some/url&#39;</span><span class="p">,</span> <span class="s1">&#39;MyApp\\Admin\\UserController@index&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;some/other/url&#39;</span><span class="p">,</span> <span class="s1">&#39;MyApp\\Admin\\UserController@edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// can become the slightly cleaner</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;prefix&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span><span class="p">,</span> <span class="s1">&#39;namespace&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;MyApp\\Admin&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;UserController@index&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;user/edit&#39;</span><span class="p">,</span> <span class="s1">&#39;UserController@edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Query builder/Eloquent can now find multiple rows with <code>find()</code> by passing an array (<a href="https://github.com/laravel/framework/commit/911e08b1501c45b7b58a62007708bc9494e385b5"><code>911e08b</code></a>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get users 1 and 5</span>
</span><span class='line'><span class="nv">$users</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Can get current environment using <code>artisan env</code> (useful for debugging weird database connection issues with artisan &ndash; not so useful for knowing what environment the web site is running as artisan and the running web instance will use different methods to determine the environment, so they could quite easily be different) (<a href="https://github.com/laravel/framework/commit/5c7ba12fda225a295ae96dbb7770f4859aa65330"><code>5c7ba12</code></a>)</p></li>
<li><p>Can now return an ArrayObject from a route action and it&rsquo;ll be serialised as JSON (previously it was just just bare arrays and JsonableInterface objects) (<a href="https://github.com/laravel/framework/commit/bd4b0c6eb5633c8ebf6daf7ed2329550fb2761d5"><code>bd4b0c6</code></a>)</p></li>
<li><p>Packages&#8217; views can now be published (like config and assets were) using <code>artisan view:publish</code> (<a href="https://github.com/laravel/framework/commit/44a27da7245b5da88fd97934d250b59813127053"><code>44a27da</code></a>)</p></li>
<li><p>Paginator can now be returned from a route action and it&rsquo;ll be serialised to JSON (good for paginated responses in APIs) (<a href="https://github.com/laravel/framework/commit/5875b60d823b331ee838ebbe74fbc64a53c520a4"><code>5875b60</code></a>)</p></li>
<li><p>Eloquent query builder now has <code>firstOrNew</code> and <code>firstOrCreate</code> methods (<a href="https://github.com/laravel/framework/commit/fce86bc9b53cb693284ea1dc557b3034375fd1ca"><code>fce86bc</code></a>):</p>

<ul>
<li><code>firstOrNew</code> tries to use the passed array of attributes to find the model, and if it can&rsquo;t find it it&rsquo;ll create a new (unsaved) instance of the model</li>
<li><code>firstOrCreate</code> tries to use the passed array of attributes to find the model, and if it can&rsquo;t find it it&rsquo;ll create a new instance of the model and save it immediately</li>
<li><strong>Implementation note:</strong> this also uses a convenient new method <code>firstByAttributes</code> which is unfortunately protected in <code>Illuminate\Database\Eloquent\Model</code>. The method is nothing special, just cycles through the array adding <code>where</code>s to a query builder</li>
</ul>
</li>
<li><p>new <code>Redirect::away</code> method allows passing of any URL &ndash; the passed URL is not validated, works just like <code>Redirect::to</code> otherwise (<a href="https://github.com/laravel/framework/commit/8c47d1173a8f666d8be278219f63d3c51459379e"><code>8c47d11</code></a>)</p></li>
<li><p>Remote feature now allows setting the port (<a href="https://github.com/laravel/framework/commit/3f7c47cb243be3ba201bf75c6c0c38e7b96b43b3"><code>3f7c47c</code></a>)</p></li>
<li><p>Like the Eloquent view data from <code>e7fd520</code>, redirects can do the same (<a href="https://github.com/laravel/framework/commit/97bbfe6f09e7b0a5143d65568e886f7a1ace2f9c"><code>97bbfe6</code></a>):</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Redirect</span><span class="o">::</span><span class="na">route</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">withMessage</span><span class="p">(</span><span class="s1">&#39;Please log in&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Validator now has a <code>sometimes</code> method that allows to set conditional rules (<a href="https://github.com/laravel/framework/commit/ffa70d312c8e639ce36e2859d4977dba123a2af6"><code>ffa70d3</code></a>, <a href="http://laravel.com/docs/validation#conditionally-adding-rules">docs</a>):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// say we&#39;re validating some kind of user type - if &#39;business_type&#39; is set</span>
</span><span class='line'><span class="c1">// to &#39;business&#39; then &#39;business_name&#39; is requied</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$v</span> <span class="o">=</span> <span class="nx">Validator</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;email&#39;</span>        <span class="o">=&gt;</span> <span class="s1">&#39;required|email&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;name&#39;</span>         <span class="o">=&gt;</span> <span class="s1">&#39;required&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;license_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;required&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this rule only applies when the closure returns true</span>
</span><span class='line'><span class="nv">$v</span><span class="o">-&gt;</span><span class="na">sometimes</span><span class="p">(</span><span class="s1">&#39;business_name&#39;</span><span class="p">,</span> <span class="s1">&#39;required&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">license_type</span> <span class="o">==</span> <span class="s1">&#39;business&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first parameter to <code>sometimes</code> can be an array that specifies multiple rules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Example: in the checkout area of an ecommerce site, only require the delivery</span>
</span><span class='line'><span class="c1">// fields to be set if the &#39;deliver to my billing address&#39; field is not checked</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$v</span><span class="o">-&gt;</span><span class="na">sometimes</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;delivery_name&#39;</span><span class="p">,</span> <span class="s1">&#39;delivery_address&#39;</span><span class="p">,</span> <span class="s1">&#39;delivery_country&#39;</span> <span class="cm">/* etc. */</span><span class="p">],</span>
</span><span class='line'>    <span class="s1">&#39;required&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">deliver_to_billing_address</span> <span class="o">!=</span> <span class="s1">&#39;yes&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
